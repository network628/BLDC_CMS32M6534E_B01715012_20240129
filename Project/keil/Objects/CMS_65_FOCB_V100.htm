<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CMS_65_FOCB_V100.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CMS_65_FOCB_V100.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Feb 19 13:54:41 2024
<BR><P>
<H3>Maximum Stack Usage =        488 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; System_Control &rArr; GET_ADC_REF_VAL
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b]">Reserved_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">Reserved_IRQHandler</a><BR>
 <LI><a href="#[e]">INTP2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">INTP2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ACMP_IRQHandler</a> from interrupt.o(i.ACMP_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[13]">ADC_IRQHandler</a> from interrupt.o(i.ADC_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[11]">CCP_IRQHandler</a> from interrupt.o(i.CCP_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[12]">EPWM_IRQHandler</a> from interrupt.o(i.EPWM_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[20]">FMC_IRQHandler</a> from isr.o(i.FMC_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from isr.o(i.HardFault_Handler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from isr.o(i.I2C0_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[c]">INTP0_IRQHandler</a> from isr.o(i.INTP0_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[d]">INTP1_IRQHandler</a> from isr.o(i.INTP1_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[e]">INTP2_IRQHandler</a> from startup_cms32m6510.o(.text) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[f]">INTP3_IRQHandler</a> from isr.o(i.INTP3_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[1a]">LSITIMER_IRQHandler</a> from isr.o(i.LSITIMER_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[b]">LVI_IRQHandler</a> from system_cms32m6510.o(i.LVI_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from isr.o(i.NMI_Handler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from isr.o(i.PendSV_Handler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[1b]">Reserved_IRQHandler</a> from startup_cms32m6510.o(.text) referenced 11 times from startup_cms32m6510.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_cms32m6510.o(.text) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[17]">SSP0_IRQHandler</a> from isr.o(i.SSP0_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from isr.o(i.SVC_Handler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_cms32m6510.o(i.SystemInit) referenced from startup_cms32m6510.o(.text)
 <LI><a href="#[18]">TIMER0_IRQHandler</a> from isr.o(i.TIMER0_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[19]">TIMER1_IRQHandler</a> from interrupt.o(i.TIMER1_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[1c]">TM00_IRQHandler</a> from isr.o(i.TM00_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[10]">TM01H_IRQHandler</a> from isr.o(i.TM01H_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[1d]">TM01_IRQHandler</a> from isr.o(i.TM01_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[1e]">TM02_IRQHandler</a> from isr.o(i.TM02_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[1f]">TM03_IRQHandler</a> from isr.o(i.TM03_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[15]">UART0_IRQHandler</a> from isr.o(i.UART0_IRQHandler) referenced from startup_cms32m6510.o(RESET)
 <LI><a href="#[23]">__main</a> from __main.o(!!!main) referenced from startup_cms32m6510.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[30]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[25]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[28]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[106]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; System_Control &rArr; GET_ADC_REF_VAL
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[108]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[31]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cms32m6510.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Reserved_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32m6510.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>INTP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m6510.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTP2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTP2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_cms32m6510.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[34]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[33]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[109]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ADC_REF_VAL
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Out
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Capture
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Speed_Control
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_MotorSpeed_Calc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Actual_Calculate
</UL>

<P><STRONG><a name="[10d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_BaseValue_Init
</UL>

<P><STRONG><a name="[110]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FOCPara_Init
</UL>

<P><STRONG><a name="[111]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BaseParameter_Init
</UL>

<P><STRONG><a name="[38]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[37]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AD_Speed_Control
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BaseParameter_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FOCPara_Init
</UL>

<P><STRONG><a name="[112]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AD_Speed_Control
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FOCPara_Init
</UL>

<P><STRONG><a name="[113]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[114]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BaseParameter_Init
</UL>

<P><STRONG><a name="[29]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2e]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[115]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[116]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[117]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>ACMP1_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hardinit.o(i.ACMP1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACMP1_Init &rArr; DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER13PeriphClockCmd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Polarity_Config
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Filter_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_EnableHYS
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_EnableEventOut
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_ConfigPositive
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_ConfigNegative
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_ConfigEventAndIntMode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMPOut_Enable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[119]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>ACMPOut_Enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, acmp.o(i.ACMPOut_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[4c]"></a>ACMP_ClearIntFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, acmp.o(i.ACMP_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EI_Set
</UL>

<P><STRONG><a name="[48]"></a>ACMP_ConfigEventAndIntMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, acmp.o(i.ACMP_ConfigEventAndIntMode))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[43]"></a>ACMP_ConfigNegative</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, acmp.o(i.ACMP_ConfigNegative))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[42]"></a>ACMP_ConfigPositive</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, acmp.o(i.ACMP_ConfigPositive))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[49]"></a>ACMP_EnableEventOut</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, acmp.o(i.ACMP_EnableEventOut))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[47]"></a>ACMP_EnableHYS</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, acmp.o(i.ACMP_EnableHYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ACMP_EnableHYS
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[e0]"></a>ACMP_EnableInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, acmp.o(i.ACMP_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EI_Set
</UL>

<P><STRONG><a name="[45]"></a>ACMP_Filter_Config</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, acmp.o(i.ACMP_Filter_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ACMP_Filter_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[14]"></a>ACMP_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.ACMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACMP_IRQHandler &rArr; FOC_ControlPara_Init &rArr; FOC_RotorPosition_Init &rArr; FOC_Rpd_Angle_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_ClearIntFlag
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Modules_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ACMP_Polarity_Config</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, acmp.o(i.ACMP_Polarity_Config))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[4b]"></a>ACMP_Start</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, acmp.o(i.ACMP_Start))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[d0]"></a>ADCLDO_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adcldo.o(i.ADCLDO_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[cf]"></a>ADCLDO_OutVlotageSel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adcldo.o(i.ADCLDO_OutVlotageSel))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[51]"></a>ADC_ClearAllInt_Flag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, softinit.o(i.ADC_ClearAllInt_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>ADC_ConfigChannelSwitchMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adc.o(i.ADC_ConfigChannelSwitchMode))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[53]"></a>ADC_ConfigRunMode</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, adc.o(i.ADC_ConfigRunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_ConfigRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[56]"></a>ADC_ConfigVREF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADC_ConfigVREF))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[55]"></a>ADC_DisableChargeAndDischarge</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(i.ADC_DisableChargeAndDischarge))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5a]"></a>ADC_DisableEPWMCmp0TriggerChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADC_DisableEPWMCmp0TriggerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TGSAMP_CONFIG
</UL>

<P><STRONG><a name="[5b]"></a>ADC_DisableEPWMCmp1TriggerChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADC_DisableEPWMCmp1TriggerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TGSAMP_CONFIG
</UL>

<P><STRONG><a name="[98]"></a>ADC_DisableEPWMTriggerChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADC_DisableEPWMTriggerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Wind
</UL>

<P><STRONG><a name="[5c]"></a>ADC_EnableEPWMCmp0TriggerChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADC_EnableEPWMCmp0TriggerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TGSAMP_CONFIG
</UL>

<P><STRONG><a name="[5d]"></a>ADC_EnableEPWMCmp1TriggerChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADC_EnableEPWMCmp1TriggerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TGSAMP_CONFIG
</UL>

<P><STRONG><a name="[5f]"></a>ADC_EnableEPWMTriggerChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADC_EnableEPWMTriggerChannel))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TGSAMP_CONFIG
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Wind
</UL>

<P><STRONG><a name="[5e]"></a>ADC_EnableHardwareTrigger</STRONG> (Thumb, 212 bytes, Stack size 4 bytes, adc.o(i.ADC_EnableHardwareTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_EnableHardwareTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TGSAMP_CONFIG
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Wind
</UL>

<P><STRONG><a name="[13]"></a>ADC_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, interrupt.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC_IRQHandler &rArr; FOC_Control_Process &rArr; FOC_Control_Switch &rArr; FOC_RotorPosition_Detection &rArr; FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Read_Current
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearAllInt_Flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hardinit.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Init &rArr; ADC_ConfigRunMode
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER13PeriphClockCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DisableChargeAndDischarge
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigVREF
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRunMode
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigChannelSwitchMode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[c2]"></a>ADC_Sample</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, mc_ctrl.o(i.ADC_Sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sample
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_1ms
</UL>

<P><STRONG><a name="[58]"></a>ADC_Start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc.o(i.ADC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[59]"></a>ADC_TGSAMP_CONFIG</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, softinit.o(i.ADC_TGSAMP_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_TGSAMP_CONFIG &rArr; ADC_EnableHardwareTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableHardwareTrigger
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableEPWMTriggerChannel
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableEPWMCmp1TriggerChannel
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableEPWMCmp0TriggerChannel
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DisableEPWMCmp1TriggerChannel
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DisableEPWMCmp0TriggerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[60]"></a>CCP_Capture_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hardinit.o(i.CCP_Capture_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CCP_Capture_Init &rArr; CCP_ConfigCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER11PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_SelCAPMode2Channel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnableCAPMode2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_ConfigCLK
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_ConfigCAPMode2
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnableRun
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[c6]"></a>CCP_ClearCAPMode2IntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ccp.o(i.CCP_ClearCAPMode2IntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[64]"></a>CCP_ConfigCAPMode2</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, ccp.o(i.CCP_ConfigCAPMode2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_ConfigCAPMode2
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
</UL>

<P><STRONG><a name="[62]"></a>CCP_ConfigCLK</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, ccp.o(i.CCP_ConfigCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CCP_ConfigCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
</UL>

<P><STRONG><a name="[d2]"></a>CCP_ConfigCompare</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, ccp.o(i.CCP_ConfigCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_ConfigCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[d3]"></a>CCP_DisableReverseOutput</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, ccp.o(i.CCP_DisableReverseOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_DisableReverseOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[d7]"></a>CCP_DisableRun</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ccp.o(i.CCP_DisableRun))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Out
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Capture
</UL>

<P><STRONG><a name="[63]"></a>CCP_EnableCAPMode2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ccp.o(i.CCP_EnableCAPMode2))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
</UL>

<P><STRONG><a name="[d1]"></a>CCP_EnablePWMMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ccp.o(i.CCP_EnablePWMMode))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[66]"></a>CCP_EnableRun</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ccp.o(i.CCP_EnableRun))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Out
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Capture
</UL>

<P><STRONG><a name="[d9]"></a>CCP_GetCAPMode2Result</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ccp.o(i.CCP_GetCAPMode2Result))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Capture
</UL>

<P><STRONG><a name="[11]"></a>CCP_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, interrupt.o(i.CCP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>CCP_PWM_Config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, user_control.o(i.CCP_PWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCP_PWM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Out
</UL>

<P><STRONG><a name="[68]"></a>CCP_PWM_GPIO</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hardinit.o(i.CCP_PWM_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCP_PWM_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ClrBit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Out
</UL>

<P><STRONG><a name="[65]"></a>CCP_SelCAPMode2Channel</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, ccp.o(i.CCP_SelCAPMode2Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_SelCAPMode2Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
</UL>

<P><STRONG><a name="[67]"></a>CCP_Start</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ccp.o(i.CCP_Start))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Out
</UL>

<P><STRONG><a name="[dc]"></a>CCP_Stop</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ccp.o(i.CCP_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Out
</UL>

<P><STRONG><a name="[61]"></a>CGC_PER11PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cgc.o(i.CGC_PER11PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
</UL>

<P><STRONG><a name="[d4]"></a>CGC_PER12PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cgc.o(i.CGC_PER12PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[41]"></a>CGC_PER13PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cgc.o(i.CGC_PER13PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[c8]"></a>CLK_GetHocoFreq</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, system_cms32m6510.o(i.CLK_GetHocoFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6b]"></a>DAC_ConfigInput</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dac.o(i.DAC_ConfigInput))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[44]"></a>DAC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hardinit.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ConfigInput
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER13PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
</UL>

<P><STRONG><a name="[6c]"></a>DAC_Start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dac.o(i.DAC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[d5]"></a>DIVSQRT_EnableDIVMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, divsqrt.o(i.DIVSQRT_EnableDIVMode))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[d6]"></a>DIVSQRT_EnableSingedMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, divsqrt.o(i.DIVSQRT_EnableSingedMode))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a1]"></a>DelayTime_ms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, softinit.o(i.DelayTime_ms))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[79]"></a>EPWM_AllBrakeEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, epwm.o(i.EPWM_AllBrakeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[cb]"></a>EPWM_ClearBrake</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, epwm.o(i.EPWM_ClearBrake))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
</UL>

<P><STRONG><a name="[ca]"></a>EPWM_ClearBrakeIntFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, epwm.o(i.EPWM_ClearBrakeIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
</UL>

<P><STRONG><a name="[72]"></a>EPWM_ConfigChannelAsymDuty</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, epwm.o(i.EPWM_ConfigChannelAsymDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_ConfigChannelAsymDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[70]"></a>EPWM_ConfigChannelClk</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, epwm.o(i.EPWM_ConfigChannelClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPWM_ConfigChannelClk
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[71]"></a>EPWM_ConfigChannelPeriod</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, epwm.o(i.EPWM_ConfigChannelPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_ConfigChannelPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[76]"></a>EPWM_ConfigCompareTriger</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, epwm.o(i.EPWM_ConfigCompareTriger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPWM_ConfigCompareTriger
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Wind
</UL>

<P><STRONG><a name="[78]"></a>EPWM_ConfigFaultBrakeLevel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, epwm.o(i.EPWM_ConfigFaultBrakeLevel))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[6f]"></a>EPWM_ConfigRunMode</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, epwm.o(i.EPWM_ConfigRunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_ConfigRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[73]"></a>EPWM_DisableReverseOutput</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, epwm.o(i.EPWM_DisableReverseOutput))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[75]"></a>EPWM_EnableAutoLoadMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, epwm.o(i.EPWM_EnableAutoLoadMode))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[74]"></a>EPWM_EnableDeadZone</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, epwm.o(i.EPWM_EnableDeadZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPWM_EnableDeadZone
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[77]"></a>EPWM_EnableFaultBrake</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, epwm.o(i.EPWM_EnableFaultBrake))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[7a]"></a>EPWM_EnableOutput</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, epwm.o(i.EPWM_EnableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
</UL>

<P><STRONG><a name="[de]"></a>EPWM_EnableZeroInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, epwm.o(i.EPWM_EnableZeroInt))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EI_Set
</UL>

<P><STRONG><a name="[12]"></a>EPWM_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, interrupt.o(i.EPWM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EPWM_IRQHandler &rArr; FOC_Control_Process &rArr; FOC_Control_Switch &rArr; FOC_RotorPosition_Detection &rArr; FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SingleCurrent_Calc (via Veneer)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>EPWM_R1_Init</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, hardinit.o(i.EPWM_R1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EPWM_R1_Init &rArr; EPWM_EnableDeadZone
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableFaultBrake
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableDeadZone
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableAutoLoadMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_DisableReverseOutput
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigRunMode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigFaultBrakeLevel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigCompareTriger
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigChannelPeriod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigChannelClk
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigChannelAsymDuty
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_AllBrakeEnable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER11PeriphClockCmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[7b]"></a>EPWM_Start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, epwm.o(i.EPWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
</UL>

<P><STRONG><a name="[20]"></a>FMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.FMC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>FOC_Adap_Angle_Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, mc_adaption.o(i.FOC_Adap_Angle_Init))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Init
</UL>

<P><STRONG><a name="[8c]"></a>FOC_Adaption_Angle_Calc</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, mc_adaption.o(i.FOC_Adaption_Angle_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FOC_Adaption_Angle_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Align
</UL>

<P><STRONG><a name="[7c]"></a>FOC_ArcTan_Cal</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, mc_pmsm.o(i.FOC_ArcTan_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOC_ArcTan_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWDIV_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BEMF_Detection
</UL>

<P><STRONG><a name="[7e]"></a>FOC_BEMF_Detection</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, mc_foc_ctr.o(i.FOC_BEMF_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FOC_BEMF_Detection &rArr; FOC_ArcTan_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWDIV_Div
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SinCos_Calc (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ArcTan_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Wind
</UL>

<P><STRONG><a name="[88]"></a>FOC_BEMF_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mc_foc_ctr.o(i.FOC_BEMF_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
</UL>

<P><STRONG><a name="[80]"></a>FOC_BaseParameter_Init</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, mc_adaption.o(i.FOC_BaseParameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FOC_BaseParameter_Init &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
</UL>

<P><STRONG><a name="[4e]"></a>FOC_ControlPara_Init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, mc_foc.o(i.FOC_ControlPara_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FOC_ControlPara_Init &rArr; FOC_RotorPosition_Init &rArr; FOC_Rpd_Angle_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SingleShunt_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_PID_Parameter_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_OpenLoop_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BEMF_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Start_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
</UL>

<P><STRONG><a name="[8b]"></a>FOC_Control_Align</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, mc_foc.o(i.FOC_Control_Align))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FOC_Control_Align &rArr; FOC_SingleShunt_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SingleShunt_Calc (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SinCos_Calc (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_DoubleShunt_Calc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_DQCurrent_PIRegulator
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Adaption_Angle_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
</UL>

<P><STRONG><a name="[50]"></a>FOC_Control_Process</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, mc_foc.o(i.FOC_Control_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FOC_Control_Process &rArr; FOC_Control_Switch &rArr; FOC_RotorPosition_Detection &rArr; FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Wind
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Switch
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Run
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Align
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>FOC_Control_Run</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, mc_foc.o(i.FOC_Control_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FOC_Control_Run &rArr; FOC_RotorPosition_Detection &rArr; FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SingleShunt_Calc (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Weakening (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
</UL>

<P><STRONG><a name="[91]"></a>FOC_Control_Start</STRONG> (Thumb, 686 bytes, Stack size 40 bytes, mc_foc.o(i.FOC_Control_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FOC_Control_Start &rArr; FOC_RotorPosition_Detection &rArr; FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SingleShunt_Calc (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
</UL>

<P><STRONG><a name="[94]"></a>FOC_Control_Stop</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, mc_foc.o(i.FOC_Control_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FOC_Control_Stop &rArr; FOC_RotorPosition_Detection &rArr; FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SingleShunt_Calc (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Stop_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
</UL>

<P><STRONG><a name="[92]"></a>FOC_Control_Switch</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, mc_foc.o(i.FOC_Control_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FOC_Control_Switch &rArr; FOC_RotorPosition_Detection &rArr; FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SingleShunt_Calc (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
</UL>

<P><STRONG><a name="[90]"></a>FOC_Control_Wind</STRONG> (Thumb, 482 bytes, Stack size 24 bytes, mc_foc.o(i.FOC_Control_Wind))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FOC_Control_Wind &rArr; FOC_BEMF_Detection &rArr; FOC_ArcTan_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigCompareTriger
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWDIV_Div
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BEMF_Detection
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DisableEPWMTriggerChannel
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableHardwareTrigger
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableEPWMTriggerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Process
</UL>

<P><STRONG><a name="[8d]"></a>FOC_DQCurrent_PIRegulator</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, mc_foc_ctr.o(i.FOC_DQCurrent_PIRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FOC_DQCurrent_PIRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Align
</UL>

<P><STRONG><a name="[8e]"></a>FOC_DoubleShunt_Calc</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, mc_pmsm.o(i.FOC_DoubleShunt_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOC_DoubleShunt_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWDIV_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Align
</UL>

<P><STRONG><a name="[8a]"></a>FOC_OpenLoop_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_openloop.o(i.FOC_OpenLoop_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
</UL>

<P><STRONG><a name="[86]"></a>FOC_PID_Parameter_Init</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, mc_pic.o(i.FOC_PID_Parameter_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
</UL>

<P><STRONG><a name="[4f]"></a>FOC_Read_Current</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mc_foc.o(i.FOC_Read_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOC_Read_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>FOC_RotorPosition_Calc</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, mc_rfo_est.o(i.FOC_RotorPosition_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOC_RotorPosition_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWDIV_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection
</UL>

<P><STRONG><a name="[95]"></a>FOC_RotorPosition_Detection</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, mc_foc_ctr.o(i.FOC_RotorPosition_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FOC_RotorPosition_Detection &rArr; FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Adaption_Angle_Calc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_MotorSpeed_Filter (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SMO_Angle_Calc (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Calc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CloseLoop_Switch (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Switch
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Run
</UL>

<P><STRONG><a name="[87]"></a>FOC_RotorPosition_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mc_adaption.o(i.FOC_RotorPosition_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FOC_RotorPosition_Init &rArr; FOC_Rpd_Angle_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Rpd_Angle_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Adap_Angle_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
</UL>

<P><STRONG><a name="[9e]"></a>FOC_Rpd_Angle_Init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mc_rfo_est.o(i.FOC_Rpd_Angle_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOC_Rpd_Angle_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWDIV_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Init
</UL>

<P><STRONG><a name="[89]"></a>FOC_SingleShunt_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc_single.o(i.FOC_SingleShunt_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
</UL>

<P><STRONG><a name="[85]"></a>FOC_Start_Init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, mc_foc.o(i.FOC_Start_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
</UL>

<P><STRONG><a name="[97]"></a>FOC_Stop_Check</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, mc_foc.o(i.FOC_Stop_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FOC_Stop_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Stop
</UL>

<P><STRONG><a name="[c3]"></a>FOC_User_Control</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.FOC_User_Control))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_1ms
</UL>

<P><STRONG><a name="[9f]"></a>GET_ADC_REF_VAL</STRONG> (Thumb, 250 bytes, Stack size 464 bytes, softinit.o(i.GET_ADC_REF_VAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = GET_ADC_REF_VAL
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
</UL>

<P><STRONG><a name="[57]"></a>GPIO_Init</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_PWM_GPIO
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
</UL>

<P><STRONG><a name="[7d]"></a>HWDIV_Div</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_adaption.o(i.HWDIV_Div))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SingleShunt_Calc (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_DoubleShunt_Calc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BEMF_Detection
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Wind
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Rpd_Angle_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_SMO_Angle_Calc (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Calc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ArcTan_Cal
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTime_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.I2C0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>INTP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.INTP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>INTP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.INTP1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>INTP3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.INTP3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>LSITIMER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.LSITIMER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVI_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cms32m6510.o(i.LVI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>MC_BasePara_Init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, softinit.o(i.MC_BasePara_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
</UL>

<P><STRONG><a name="[a2]"></a>MC_BaseValue_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, softinit.o(i.MC_BaseValue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MC_BaseValue_Init &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
</UL>

<P><STRONG><a name="[a4]"></a>MC_FOCPara_Init</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, softinit.o(i.MC_FOCPara_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MC_FOCPara_Init &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
</UL>

<P><STRONG><a name="[ad]"></a>MC_FaultPara_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, softinit.o(i.MC_FaultPara_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
</UL>

<P><STRONG><a name="[a6]"></a>MC_MotorFault_Check</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, mc_ctrl.o(i.MC_MotorFault_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MC_MotorFault_Check &rArr; MC_PhaseLoss_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_PhaseLoss_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a8]"></a>MC_MotorInit_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mc_ctrl.o(i.MC_MotorInit_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MC_MotorInit_Process &rArr; FOC_MotorSpeed_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_MotorSpeed_Filter (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a9]"></a>MC_MotorSpeed_Calc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mc_ctrl.o(i.MC_MotorSpeed_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MC_MotorSpeed_Calc &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[af]"></a>MC_OpenLoop_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, softinit.o(i.MC_OpenLoop_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
</UL>

<P><STRONG><a name="[ab]"></a>MC_Para_Init</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, softinit.o(i.MC_Para_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MC_Para_Init &rArr; MC_FOCPara_Init &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_UserPowerSet_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SampPara_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_OpenLoop_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FaultPara_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FOCPara_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_BaseValue_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_BasePara_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a7]"></a>MC_PhaseLoss_Check</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, mc_ctrl.o(i.MC_PhaseLoss_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC_PhaseLoss_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_MotorFault_Check
</UL>

<P><STRONG><a name="[ac]"></a>MC_SampPara_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, softinit.o(i.MC_SampPara_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
</UL>

<P><STRONG><a name="[b1]"></a>MC_Speed_Control</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, mc_ctrl.o(i.MC_Speed_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MC_Speed_Control &rArr; Motor_Actual_Calculate &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CALC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Actual_Calculate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b0]"></a>MC_UserPowerSet_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, softinit.o(i.MC_UserPowerSet_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
</UL>

<P><STRONG><a name="[b2]"></a>Motor_Actual_Calculate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mc_ctrl.o(i.Motor_Actual_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_Actual_Calculate &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Speed_Control
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>PGA0_ConfigResistorPAD</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pga.o(i.PGA0_ConfigResistorPAD))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
</UL>

<P><STRONG><a name="[ba]"></a>PGA0_Filter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pga.o(i.PGA0_Filter))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
</UL>

<P><STRONG><a name="[b4]"></a>PGA0_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hardinit.o(i.PGA0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PGA0_Init &rArr; PGA_ModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_VrefCtrl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_ModeSet
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_EnableOutput
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_ConfigGain
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Filter
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_ConfigResistorPAD
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER13PeriphClockCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_Start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[b5]"></a>PGA_ConfigGain</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, pga.o(i.PGA_ConfigGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PGA_ConfigGain
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
</UL>

<P><STRONG><a name="[b9]"></a>PGA_EnableOutput</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, pga.o(i.PGA_EnableOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PGA_EnableOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
</UL>

<P><STRONG><a name="[b7]"></a>PGA_ModeSet</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pga.o(i.PGA_ModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PGA_ModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
</UL>

<P><STRONG><a name="[bb]"></a>PGA_Start</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, pga.o(i.PGA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PGA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
</UL>

<P><STRONG><a name="[b6]"></a>PGA_VrefCtrl</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, pga.o(i.PGA_VrefCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PGA_VrefCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
</UL>

<P><STRONG><a name="[b3]"></a>PID_CALC</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, mc_pic.o(i.PID_CALC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_CALC
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Speed_Control
</UL>

<P><STRONG><a name="[69]"></a>PORT_ClrBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.PORT_ClrBit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_PWM_GPIO
</UL>

<P><STRONG><a name="[d8]"></a>PORT_GetBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.PORT_GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Capture
</UL>

<P><STRONG><a name="[6a]"></a>PORT_SetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.PORT_SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_PWM_GPIO
</UL>

<P><STRONG><a name="[bc]"></a>PWM_AD_Speed_Control</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, user_control.o(i.PWM_AD_Speed_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWM_AD_Speed_Control &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Motor_On
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Motor_Off
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_MotorSpeed_Set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Control
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>RESTPinGpio_Set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.RESTPinGpio_Set))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[17]"></a>SSP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.SSP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>SysTick_1ms</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mc_ctrl.o(i.SysTick_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_1ms &rArr; User_Speed_Out &rArr; CCP_PWM_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_User_Control
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Out
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Capture
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sample
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; MC_Speed_Control &rArr; Motor_Actual_Calculate &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Speed_Control
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_MotorSpeed_Calc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_MotorInit_Process
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_MotorFault_Check
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_ClearCAPMode2IntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, system_cms32m6510.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, system_cms32m6510.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>System_Control</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, mc_ctrl.o(i.System_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = System_Control &rArr; GET_ADC_REF_VAL
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_ControlPara_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTime_ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Speed_Control
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BaseParameter_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ClearBrakeIntFlag
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ClearBrake
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ADC_REF_VAL
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>System_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, hardinit.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = System_Init &rArr; MC_Para_Init &rArr; MC_FOCPara_Init &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESTPinGpio_Set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ClrBit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER13PeriphClockCmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER11PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnablePWMMode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_DisableReverseOutput
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_ConfigCompare
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_ConfigCLK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TGSAMP_CONFIG
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLDO_OutVlotageSel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLDO_Disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA0_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_R1_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayTime_ms
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIVSQRT_EnableSingedMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIVSQRT_EnableDIVMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER12PeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Capture_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>System_Modules_off</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mc_ctrl.o(i.System_Modules_off))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupt.o(i.TIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TM00_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.TM00_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TM01H_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.TM01H_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TM01_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.TM01_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TM02_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.TM02_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TM03_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.TM03_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m6510.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>User_MotorSpeed_Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mc_ctrl.o(i.User_MotorSpeed_Set))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AD_Speed_Control
</UL>

<P><STRONG><a name="[bd]"></a>User_Motor_Off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_ctrl.o(i.User_Motor_Off))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AD_Speed_Control
</UL>

<P><STRONG><a name="[c0]"></a>User_Motor_On</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_ctrl.o(i.User_Motor_On))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AD_Speed_Control
</UL>

<P><STRONG><a name="[c4]"></a>User_Speed_Capture</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, user_control.o(i.User_Speed_Capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = User_Speed_Capture
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_GetCAPMode2Result
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnableRun
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_DisableRun
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_1ms
</UL>

<P><STRONG><a name="[cc]"></a>User_Speed_Control</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_control.o(i.User_Speed_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = User_Speed_Control &rArr; PWM_AD_Speed_Control &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AD_Speed_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
</UL>

<P><STRONG><a name="[c5]"></a>User_Speed_Out</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, user_control.o(i.User_Speed_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = User_Speed_Out &rArr; CCP_PWM_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Start
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_PWM_GPIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnableRun
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_DisableRun
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_PWM_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_1ms
</UL>

<P><STRONG><a name="[e1]"></a>WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(i.WDT_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>__EI_Set</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, softinit.o(i.__EI_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __EI_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_ClearIntFlag
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableZeroInt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = main &rArr; System_Control &rArr; GET_ADC_REF_VAL
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Control
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_1ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EI_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AD_Speed_Control
</UL>

<P><STRONG><a name="[e2]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Para_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_AD_Speed_Control
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BaseParameter_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_FOCPara_Init
</UL>

<P><STRONG><a name="[11a]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[e4]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[9c]"></a>FOC_CloseLoop_Switch</STRONG> (Thumb, 298 bytes, Stack size 20 bytes, mc_foc_ctr.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FOC_CloseLoop_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection (via Veneer)
</UL>

<P><STRONG><a name="[9a]"></a>FOC_MotorSpeed_Filter</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mc_foc_ctr.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOC_MotorSpeed_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_MotorInit_Process (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection (via Veneer)
</UL>

<P><STRONG><a name="[96]"></a>FOC_Control_Weakening</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, mc_foc_ctr.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOC_Control_Weakening
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Run (via Veneer)
</UL>

<P><STRONG><a name="[9b]"></a>FOC_SMO_Angle_Calc</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, mc_obse.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FOC_SMO_Angle_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWDIV_Div (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_RotorPosition_Detection (via Veneer)
</UL>

<P><STRONG><a name="[7f]"></a>FOC_SinCos_Calc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mc_pmsm.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOC_SinCos_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_BEMF_Detection (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Align (via Veneer)
</UL>

<P><STRONG><a name="[6d]"></a>FOC_SingleCurrent_Calc</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, mc_single.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FOC_SingleCurrent_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[8f]"></a>FOC_SingleShunt_Calc</STRONG> (Thumb, 742 bytes, Stack size 32 bytes, mc_single.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FOC_SingleShunt_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWDIV_Div (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Switch (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Stop (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Start (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Run (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Control_Align (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, softinit.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EI_Set
</UL>

<P><STRONG><a name="[e5]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[e3]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
